name: Release

on:
  push:
    branches:
      - main
    paths:
      - "sa/**"
      - ".github/workflows/release.yml"
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Custom release notes'
        required: false
        type: string

jobs:
  build:
    name: Build and Release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary_suffix: ""
          - target: x86_64-apple-darwin
            os: macos-latest
            binary_suffix: ""
          - target: aarch64-apple-darwin
            os: macos-latest
            binary_suffix: ""
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary_suffix: ".exe"

    env:
      CARGO_TERM_COLOR: always
      CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG: true
      RUST_BACKTRACE: full
      MACOSX_DEPLOYMENT_TARGET: 11.0
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for proper versioning

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            sa/target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('sa/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Install OpenSSL (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
          export OPENSSL_DIR=/usr/lib/ssl
          export OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu
          export OPENSSL_INCLUDE_DIR=/usr/include/openssl
          echo "OPENSSL_DIR=$OPENSSL_DIR" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$OPENSSL_LIB_DIR" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$OPENSSL_INCLUDE_DIR" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig" >> $GITHUB_ENV

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install pkg-config openssl
          echo "OPENSSL_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl)/lib/pkgconfig" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$(brew --prefix openssl)/lib" >> $GITHUB_ENV

      - name: Build for target
        working-directory: sa
        run: cargo build --release --target ${{ matrix.target }}
        env:
          RUST_BACKTRACE: full
          MACOSX_DEPLOYMENT_TARGET: 11.0
          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}

      - name: Archive binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p artifacts
          binary_path="sa/target/${{ matrix.target }}/release/sa"
          if [ -f "$binary_path" ]; then
            cp "$binary_path" "artifacts/sa-${{ matrix.target }}"
            chmod +x "artifacts/sa-${{ matrix.target }}"
            echo "Binary size: $(du -h "artifacts/sa-${{ matrix.target }}" | cut -f1)"
            ls -la artifacts/
          else
            echo "Binary not found at: $binary_path"
            find sa/target -name "sa" -type f
            exit 1
          fi

      - name: Archive binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir artifacts
          $binary_path = "sa\target\${{ matrix.target }}\release\sa.exe"
          if (Test-Path $binary_path) {
            Copy-Item $binary_path "artifacts\sa-${{ matrix.target }}.exe"
            $size = (Get-Item "artifacts\sa-${{ matrix.target }}.exe").length
            Write-Host "Binary size: $([math]::Round($size / 1MB, 2)) MB"
            Get-ChildItem artifacts
          } else {
            Write-Host "Binary not found at: $binary_path"
            Get-ChildItem sa\target -Recurse -Name "sa.exe"
            exit 1
          }
        shell: powershell

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sa-${{ matrix.target }}
          path: artifacts/sa-${{ matrix.target }}${{ matrix.binary_suffix }}
          if-no-files-found: error

  release:
    name: Create GitHub Release
    needs: build
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for proper versioning

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: sa-x86_64-unknown-linux-gnu
          path: ./artifacts/

      - name: Download macOS Intel artifact
        uses: actions/download-artifact@v4
        with:
          name: sa-x86_64-apple-darwin
          path: ./artifacts/

      - name: Download macOS Apple Silicon artifact
        uses: actions/download-artifact@v4
        with:
          name: sa-aarch64-apple-darwin
          path: ./artifacts/

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: sa-x86_64-pc-windows-msvc
          path: ./artifacts/

      - name: List downloaded artifacts
        run: |
          echo "Listing all downloaded artifacts:"
          find ./artifacts -type f -exec ls -la {} \;
          echo "Total artifacts found:"
          find ./artifacts -type f | wc -l

      - name: Generate checksums
        run: |
          cd artifacts
          for file in *; do
            if [ -f "$file" ]; then
              sha256sum "$file" >> checksums.txt
              echo "Generated checksum for: $file"
            fi
          done
          echo "=== CHECKSUMS ==="
          cat checksums.txt

      - name: Verify all artifacts exist
        run: |
          expected_files=(
            "./artifacts/sa-x86_64-unknown-linux-gnu"
            "./artifacts/sa-x86_64-apple-darwin"
            "./artifacts/sa-aarch64-apple-darwin"
            "./artifacts/sa-x86_64-pc-windows-msvc.exe"
          )
          
          all_found=true
          for file in "${expected_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ Found: $file"
              file_size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "unknown")
              echo "   Size: $file_size bytes"
            else
              echo "❌ Missing: $file"
              all_found=false
            fi
          done
          
          if [ "$all_found" = false ]; then
            echo "Some artifacts are missing. Exiting..."
            exit 1
          fi
          echo "All artifacts verified successfully!"

      - name: Get commit messages for release notes
        id: commits
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline -10 --pretty=format:"- %s")
          else
            COMMITS=$(git log --oneline ${LAST_TAG}..HEAD --pretty=format:"- %s")
          fi
          
          # Save commits to file for multiline output
          echo "$COMMITS" > commits.txt
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          cat commits.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Determine version bump type
        id: version_type
        run: |
          # Default to patch, but check commit messages for version hints
          VERSION_BUMP="patch"
          
          # Check if this is a manual workflow dispatch with version input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version_bump }}" ]; then
            VERSION_BUMP="${{ github.event.inputs.version_bump }}"
          else
            # Auto-detect version bump from commit messages
            COMMITS=$(cat commits.txt || echo "")
            if echo "$COMMITS" | grep -i "breaking\|major"; then
              VERSION_BUMP="major"
            elif echo "$COMMITS" | grep -i "feature\|feat\|minor"; then
              VERSION_BUMP="minor"
            fi
          fi
          
          echo "version_bump=$VERSION_BUMP" >> $GITHUB_OUTPUT
          echo "Determined version bump: $VERSION_BUMP"

      - name: Bump version and create tag
        id: versioning
        uses: anothrNick/github-tag-action@1.67.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: ${{ steps.version_type.outputs.version_bump }}
          WITH_V: true
          INITIAL_VERSION: "1.0.0"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.versioning.outputs.new_tag }}
          files: |
            ./artifacts/sa-x86_64-unknown-linux-gnu
            ./artifacts/sa-x86_64-apple-darwin
            ./artifacts/sa-aarch64-apple-darwin
            ./artifacts/sa-x86_64-pc-windows-msvc.exe
            ./artifacts/checksums.txt
          name: "SA Python Package Manager ${{ steps.versioning.outputs.new_tag }}"
          body: |
            ## SA Python Package Manager ${{ steps.versioning.outputs.new_tag }}
            
            ${{ github.event.inputs.release_notes && github.event.inputs.release_notes || '### What Changed' }}
            
            ${{ steps.commits.outputs.commits }}
            
            ### Cross-Platform Binaries
            This release includes optimized binaries for all major platforms:
            
            | Platform | Architecture | Binary | Size |
            |----------|-------------|--------|------|
            | 🐧 Linux | x86_64 | `sa-x86_64-unknown-linux-gnu` | ![Size](https://img.shields.io/badge/size-calculating-blue) |
            | 🍎 macOS | Intel x86_64 | `sa-x86_64-apple-darwin` | ![Size](https://img.shields.io/badge/size-calculating-blue) |
            | 🍎 macOS | Apple Silicon (M1/M2) | `sa-aarch64-apple-darwin` | ![Size](https://img.shields.io/badge/size-calculating-blue) |
            | 🪟 Windows | x86_64 | `sa-x86_64-pc-windows-msvc.exe` | ![Size](https://img.shields.io/badge/size-calculating-blue) |
            
            ### Quick Install
            
            **Linux/macOS:**
            ```bash
            # Download and install (replace with your platform)
            curl -L -o sa https://github.com/${{ github.repository }}/releases/download/${{ steps.versioning.outputs.new_tag }}/sa-x86_64-unknown-linux-gnu
            chmod +x sa
            sudo mv sa /usr/local/bin/
            ```
            
            **Windows (PowerShell):**
            ```powershell
            # Download and install
            Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/${{ steps.versioning.outputs.new_tag }}/sa-x86_64-pc-windows-msvc.exe" -OutFile "sa.exe"
            # Move to a directory in your PATH
            ```
            
            ### Verification
            
            Verify your download using the provided checksums:
            ```bash
            # Download checksums
            curl -L -o checksums.txt https://github.com/${{ github.repository }}/releases/download/${{ steps.versioning.outputs.new_tag }}/checksums.txt
            
            # Verify (Linux/macOS)
            sha256sum -c checksums.txt
            
            # Verify (Windows PowerShell)
            Get-FileHash sa-x86_64-pc-windows-msvc.exe -Algorithm SHA256
            ```
            
            ### What is SA?
            
            SA (Super Accelerated) is a fast, modern Python package manager that provides:
            - 🚀 Lightning-fast dependency resolution
            - 🔒 Isolated virtual environments per project
            - 📦 Easy package management with rich metadata display
            - 🏗️ Built-in project building and publishing
            - 🌐 Cross-platform compatibility
            
            **Usage Examples:**
            ```bash
            # Add a package
            sa add requests numpy
            
            # Run script with dependencies
            sa run --with pandas script.py
            
            # Build and publish project
            sa build
            sa publish
            ```
            
            ---
            
            **Release Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")  
            **Commit:** ${{ github.sha }}  
            **Build:** [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Cargo.toml version
        if: steps.versioning.outputs.new_tag
        run: |
          # Extract version number without 'v' prefix
          NEW_VERSION="${{ steps.versioning.outputs.new_tag }}"
          NEW_VERSION=${NEW_VERSION#v}
          
          # Update Cargo.toml version
          sed -i.bak "s/^version = .*/version = \"$NEW_VERSION\"/" sa/Cargo.toml
          
          echo "Updated Cargo.toml version to: $NEW_VERSION"
          
          # Commit the version update
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add sa/Cargo.toml
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]" || echo "No changes to commit"
          git push origin main || echo "Failed to push version update"

      - name: Create success notification
        run: |
          echo "🎉 Successfully released SA Python Package Manager ${{ steps.versioning.outputs.new_tag }}"
          echo "📦 Binaries available for:"
          echo "   - Linux (x86_64)"
          echo "   - macOS (Intel & Apple Silicon)"  
          echo "   - Windows (x86_64)"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.versioning.outputs.new_tag }}"
