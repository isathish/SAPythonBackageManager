name: Release

on:
  push:
    branches:
      - main
    paths:
      - "sa/**"
      - ".github/workflows/release.yml"
  workflow_dispatch:

jobs:
  build:
    name: Build and Release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary_suffix: ""
          - target: x86_64-apple-darwin
            os: macos-latest
            binary_suffix: ""
          - target: aarch64-apple-darwin
            os: macos-latest
            binary_suffix: ""
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary_suffix: ".exe"

    env:
      CARGO_TERM_COLOR: always
      CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG: true
      RUST_BACKTRACE: full
      MACOSX_DEPLOYMENT_TARGET: 11.0
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install OpenSSL (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
          export OPENSSL_DIR=/usr/lib/ssl
          export OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu
          export OPENSSL_INCLUDE_DIR=/usr/include/openssl
          echo "OPENSSL_DIR=$OPENSSL_DIR" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$OPENSSL_LIB_DIR" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$OPENSSL_INCLUDE_DIR" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig" >> $GITHUB_ENV

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install pkg-config openssl
          echo "OPENSSL_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl)/lib/pkgconfig" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$(brew --prefix openssl)/lib" >> $GITHUB_ENV

      - name: Build for target
        working-directory: sa
        run: cargo build --release --target ${{ matrix.target }}
        env:
          RUST_BACKTRACE: full
          MACOSX_DEPLOYMENT_TARGET: 11.0
          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}

      - name: Archive binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p artifacts
          binary_path="sa/target/${{ matrix.target }}/release/sa"
          if [ -f "$binary_path" ]; then
            cp "$binary_path" "artifacts/sa-${{ matrix.target }}"
            chmod +x "artifacts/sa-${{ matrix.target }}"
            ls -la artifacts/
          else
            echo "Binary not found at: $binary_path"
            find sa/target -name "sa" -type f
            exit 1
          fi

      - name: Archive binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir artifacts
          $binary_path = "sa\target\${{ matrix.target }}\release\sa.exe"
          if (Test-Path $binary_path) {
            Copy-Item $binary_path "artifacts\sa-${{ matrix.target }}.exe"
            Get-ChildItem artifacts
          } else {
            Write-Host "Binary not found at: $binary_path"
            Get-ChildItem sa\target -Recurse -Name "sa.exe"
            exit 1
          }
        shell: powershell

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sa-${{ matrix.target }}
          path: artifacts/sa-${{ matrix.target }}${{ matrix.binary_suffix }}
          if-no-files-found: error

  release:
    name: Create GitHub Release
    needs: build
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: sa-x86_64-unknown-linux-gnu
          path: ./artifacts/

      - name: Download macOS Intel artifact
        uses: actions/download-artifact@v4
        with:
          name: sa-x86_64-apple-darwin
          path: ./artifacts/

      - name: Download macOS Apple Silicon artifact
        uses: actions/download-artifact@v4
        with:
          name: sa-aarch64-apple-darwin
          path: ./artifacts/

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: sa-x86_64-pc-windows-msvc
          path: ./artifacts/

      - name: List downloaded artifacts
        run: |
          echo "Listing all downloaded artifacts:"
          find ./artifacts -type f -exec ls -la {} \;
          echo "Total artifacts found:"
          find ./artifacts -type f | wc -l

      - name: Verify all artifacts exist
        run: |
          expected_files=(
            "./artifacts/sa-x86_64-unknown-linux-gnu"
            "./artifacts/sa-x86_64-apple-darwin"
            "./artifacts/sa-aarch64-apple-darwin"
            "./artifacts/sa-x86_64-pc-windows-msvc.exe"
          )
          
          all_found=true
          for file in "${expected_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ Found: $file"
              file_size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "unknown")
              echo "   Size: $file_size bytes"
            else
              echo "❌ Missing: $file"
              all_found=false
            fi
          done
          
          if [ "$all_found" = false ]; then
            echo "Some artifacts are missing. Exiting..."
            exit 1
          fi
          echo "All artifacts verified successfully!"

      - name: Bump version and create tag
        id: versioning
        uses: anothrNick/github-tag-action@1.67.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch
          WITH_V: true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.versioning.outputs.new_tag }}
          files: |
            ./artifacts/sa-x86_64-unknown-linux-gnu
            ./artifacts/sa-x86_64-apple-darwin
            ./artifacts/sa-aarch64-apple-darwin
            ./artifacts/sa-x86_64-pc-windows-msvc.exe
          name: "SA Python Package Manager ${{ steps.versioning.outputs.new_tag }}"
          body: |
            ## What's Changed
            - Automated release of SA Python Package Manager
            - Cross-platform binaries for Linux, macOS (Intel & Apple Silicon), and Windows
            
            ## Download
            Choose the appropriate binary for your platform:
            - **Linux (x86_64)**: `sa-x86_64-unknown-linux-gnu`
            - **macOS (Intel)**: `sa-x86_64-apple-darwin`  
            - **macOS (Apple Silicon)**: `sa-aarch64-apple-darwin`
            - **Windows**: `sa-x86_64-pc-windows-msvc.exe`
            
            ## Installation
            1. Download the binary for your platform
            2. Rename it to `sa` (or `sa.exe` on Windows)
            3. Make it executable: `chmod +x sa` (Unix systems)
            4. Move to a directory in your PATH
            
            ## File Checksums
            You can verify the integrity of downloaded files using these checksums:
            
            ```bash
            # Linux
            sha256sum sa-x86_64-unknown-linux-gnu
            
            # macOS
            shasum -a 256 sa-x86_64-apple-darwin
            shasum -a 256 sa-aarch64-apple-darwin
            
            # Windows (PowerShell)
            Get-FileHash sa-x86_64-pc-windows-msvc.exe -Algorithm SHA256
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
