name: Release

on:
  push:
    branches:
      - main
    paths:
      - "sa/**"
      - ".github/workflows/release.yml"
  workflow_dispatch:

jobs:
  build:
    name: Build and Release
    env:
      CARGO_TERM_COLOR: always
      CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG: true
      RUST_BACKTRACE: full
      MACOSX_DEPLOYMENT_TARGET: 11.0
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install OpenSSL (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
          export OPENSSL_DIR=/usr/lib/ssl
          export OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu
          export OPENSSL_INCLUDE_DIR=/usr/include/openssl
          echo "OPENSSL_DIR=$OPENSSL_DIR" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$OPENSSL_LIB_DIR" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$OPENSSL_INCLUDE_DIR" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig" >> $GITHUB_ENV

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew reinstall pkg-config openssl
          echo "OPENSSL_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl)/lib/pkgconfig" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$(brew --prefix openssl)/lib" >> $GITHUB_ENV

      - name: Build and Package (native)
        working-directory: sa
        run: |
          cargo build --release --target ${{ matrix.target }} --target-dir target
        env:
          CARGO_TARGET_DIR: target
          RUST_BACKTRACE: full
          MACOSX_DEPLOYMENT_TARGET: 11.0
          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
          RUSTFLAGS: "-C target-cpu=native"

      - name: Archive binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          mkdir -p artifacts
          binary_path="sa/target/${{ matrix.target }}/release/sa"
          if [ -f "$binary_path" ]; then
            cp "$binary_path" "artifacts/sa-${{ matrix.target }}"
          else
            echo "Binary not found at: $binary_path"
            exit 1
          fi

      - name: Archive binary (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir artifacts
          set binary_path=sa\target\${{ matrix.target }}\release\sa.exe
          if exist "%binary_path%" (
            copy "%binary_path%" artifacts\sa-${{ matrix.target }}.exe
          ) else (
            echo Binary not found at: %binary_path%
            exit 1
          )
        shell: cmd

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sa-${{ matrix.target }}
          path: artifacts/*

  release:
    name: Create GitHub Release
    needs: build
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: sa-*
          path: ./artifacts
          merge-multiple: true

      - name: List downloaded artifacts
        run: ls -la ./artifacts

      - name: Bump version and create tag
        id: versioning
        uses: anothrNick/github-tag-action@1.67.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBPATTOKEN }}
          DEFAULT_BUMP: patch
          WITH_V: true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.versioning.outputs.new_tag }}
          files: ./artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBPATTOKEN }}
