name: Release

on:
  push:
    branches:
      - main
    paths:
      - "sa/**"
      - ".github/workflows/release.yml"
  workflow_dispatch:

jobs:
  prepare:
    name: Prepare Environment
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "Latest tag: $latest_tag"

      - name: Bump version
        id: bump
        run: |
          latest="${{ env.latest_tag }}"
          latest="${latest#v}"
          IFS='.' read -r major minor patch <<<"$latest"
          patch=$((patch + 1))
          new_tag="v$major.$minor.$patch"
          echo "new_tag=$new_tag" >> $GITHUB_ENV
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
          echo "New tag: $new_tag"

      - name: Create new tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ env.new_tag }}
          git push origin ${{ env.new_tag }}

  build:
    needs: prepare
    name: Build and Release Binaries
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            runs_on: ubuntu-latest
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            runs_on: ubuntu-latest
          - os: macos-latest
            target: x86_64-apple-darwin
            runs_on: macos-latest
          - os: macos-latest
            target: aarch64-apple-darwin
            runs_on: macos-latest
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            runs_on: windows-latest
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            runs_on: windows-latest
    runs-on: ${{ matrix.runs_on }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install OpenSSL (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
          echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew reinstall pkg-config openssl
          echo "OPENSSL_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl)/lib/pkgconfig" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$(brew --prefix openssl)/lib" >> $GITHUB_ENV

      - name: Build and Package (native)
        working-directory: sa
        run: |
          cargo build --release --target ${{ matrix.target }} --target-dir target
        env:
          CARGO_TARGET_DIR: target
          RUST_BACKTRACE: full
          MACOSX_DEPLOYMENT_TARGET: 11.0
          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
          RUSTFLAGS: "-C target-cpu=native"

      - name: Archive binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          mkdir -p artifacts
          binary_path="sa/target/${{ matrix.target }}/release/sa"
          if [ -f "$binary_path" ]; then
            cp "$binary_path" "artifacts/sa-${{ matrix.target }}"
          else
            echo "Binary not found at: $binary_path"
            exit 1
          fi

      - name: Archive binary (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir artifacts
          set binary_path=sa\target\${{ matrix.target }}\release\sa.exe
          if exist "%binary_path%" (
            copy "%binary_path%" artifacts\sa-${{ matrix.target }}.exe
          ) else (
            echo Binary not found at: %binary_path%
            exit 1
          )
        shell: cmd

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sa-${{ matrix.target }}
          path: artifacts/*

  release:
    name: Create GitHub Release
    needs: [build, prepare]
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: sa-*
          path: ./artifacts
          merge-multiple: true

      - name: List downloaded artifacts
        run: ls -la ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.new_tag }}
          files: ./artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBPATTOKEN }}
